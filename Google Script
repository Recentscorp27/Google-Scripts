// === CONFIGURATION ===
const APPROVAL_ROUTING = {
  "Operations (CS, Medical Evidence, Nexus Advisors)": {
    first: "joel@claimclimbers.com",
    second: "matt@claimclimbers.com"
  },
  "Marketing": {
    first: "james@claimclimbers.com",
    second: "matt@claimclimbers.com"
  },
  "Tech": {
    first: "josh@claimclimbers.com",
    second: "matt@claimclimbers.com"
  },
  "Executive": {
    first: "sam@claimclimbers.com",
    second: "matt@claimclimbers.com"
  },
  "Admin / Finance / HR": {
    first: "matt@claimclimbers.com",
    second: "james@claimclimbers.com"
  },
  "Other": {
    first: "matt@claimclimbers.com",
    second: "mattashleymt@gmail.com"
  }
};

const scriptUrl = "https://script.google.com/macros/s/AKfycbxEkl-jAF-tiQcYG5KVFY4OxMoyEYs6YhAr1oPkhjcV2WxsFqhnxPfpMxYAOJQghJmX-A/exec";

function onFormSubmit(e) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const row = e.range.getRow();
  const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  const values = sheet.getRange(row, 1, 1, sheet.getLastColumn()).getValues()[0];
  const data = Object.fromEntries(headers.map((h, i) => [h, values[i]]));

  const dept = (data["Department"] || "").trim();
  const routing = APPROVAL_ROUTING[dept];
  const requestorName = data["Requestor Name"] || "Someone";
  const requestorEmail = data["Email Address"] || "";

  if (!routing || !routing.first) {
    Logger.log(`‚ùå Department "${dept}" not found or missing 'first' approver.`);
    return;
  }

  const firstApprover = routing.first;
  const approveUrl = `${scriptUrl}?row=${row}&decision=Approved&stage=1&approver=${encodeURIComponent(firstApprover)}`;
  const denyUrl = `${scriptUrl}?row=${row}&decision=Denied&stage=1&approver=${encodeURIComponent(firstApprover)}`;
  const emailBody = generateStyledEmail(data, approveUrl, denyUrl, "üìã Requisition Request", requestorName);

  MailApp.sendEmail({
    to: firstApprover,
    subject: `Approval Needed: ${data["Requisition Title"]}`,
    htmlBody: emailBody
  });
}

function doGet(e) {
  const row = parseInt(e.parameter.row);
  const decision = e.parameter.decision;
  const stage = parseInt(e.parameter.stage);
  const approverEmail = e.parameter.approver;
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const timestamp = new Date().toLocaleString();

  const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  const values = sheet.getRange(row, 1, 1, sheet.getLastColumn()).getValues()[0];
  const data = Object.fromEntries(headers.map((h, i) => [h, values[i]]));

  const dept = (data["Department"] || "").trim();
  const requestorName = data["Requestor Name"] || "The submitter";
  const requestorEmail = data["Email Address"] || "";

  // === FIRST APPROVAL ===
  if (stage === 1) {
    sheet.getRange(row, getColumnIndex("1st Approval Status")).setValue(decision);
    sheet.getRange(row, getColumnIndex("1st Approval Timestamp")).setValue(timestamp);
    sheet.getRange(row, getColumnIndex("1st Approver Name")).setValue(approverEmail);

    if (decision === "Approved") {
      const routing = APPROVAL_ROUTING[dept];

      if (!routing || !routing.second) {
        Logger.log(`‚ùå Department "${dept}" is not properly configured for second-level approval.`);
        return HtmlService.createHtmlOutput(`
          <div style="font-family: Arial; color: red; padding: 20px;">
            <h2>Routing Error</h2>
            <p>The department <strong>${dept}</strong> is missing a second approver.</p>
          </div>
        `);
      }

      const secondApprover = routing.second;
      const approveUrl = `${scriptUrl}?row=${row}&decision=Approved&stage=2&approver=${encodeURIComponent(secondApprover)}`;
      const denyUrl = `${scriptUrl}?row=${row}&decision=Denied&stage=2&approver=${encodeURIComponent(secondApprover)}`;
      const emailBody = generateStyledEmail(data, approveUrl, denyUrl, "üìã Second-Level Requisition Approval", requestorName);

      MailApp.sendEmail({
        to: secondApprover,
        subject: `2nd Approval Needed: ${data["Requisition Title"]}`,
        htmlBody: emailBody
      });
    }
  }

  // === SECOND APPROVAL ===
  if (stage === 2) {
    sheet.getRange(row, getColumnIndex("2nd Approval Status")).setValue(decision);
    sheet.getRange(row, getColumnIndex("2nd Approval Timestamp")).setValue(timestamp);
    sheet.getRange(row, getColumnIndex("2nd Approver Name")).setValue(approverEmail);

    if (decision === "Approved" && requestorEmail) {
      const html = `
        <div style="font-family: Arial, sans-serif; color: #333; line-height: 1.6;">
          <h2 style="color: #2e6c80;">‚úÖ Your Requisition Was Fully Approved</h2>
          <p>Your requisition titled <strong>${data["Requisition Title"]}</strong> has been approved by both reviewers.</p>
          <p>You‚Äôll be contacted soon regarding next steps.</p>
          <br/>
          <hr/>
          <p style="font-size: 0.9em; color: #888;">This message was generated automatically by Claim Climbers‚Äô approval system.</p>
        </div>
      `;

      MailApp.sendEmail({
        to: requestorEmail,
        subject: `‚úÖ Your Requisition Was Approved`,
        htmlBody: html
      });
    }
  }

  // === CONFIRMATION SCREEN ===
  return HtmlService.createHtmlOutput(`
    <div style="font-family: Arial, sans-serif; text-align: center; padding: 40px;">
      <h2 style="color: #2e6c80;">‚úÖ Response Received</h2>
      <p>Your ${stage === 1 ? "first" : "second"} approval decision of <strong>${decision}</strong> was recorded successfully.</p>
      <p>You may now close this tab.</p>
    </div>
  `);
}

function getColumnIndex(columnName) {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const headers = sheet.getRange(1, 1, 1, sheet.getLastColumn()).getValues()[0];
  return headers.indexOf(columnName) + 1;
}

function generateStyledEmail(data, approveUrl, denyUrl, title, requestorName) {
  let html = `
    <div style="font-family: Arial, sans-serif; line-height: 1.6;">
      <p><strong>${requestorName}</strong> has submitted a requisition request from Claim Climbers that needs your approval.</p>
      <h2 style="color: #2e6c80;">${title}</h2>
      <table cellpadding="6" cellspacing="0" border="0" style="border-collapse: collapse;">
  `;

  for (const [key, value] of Object.entries(data)) {
    if (!key.toLowerCase().includes("approval") && value !== "") {
      html += `
        <tr>
          <td style="vertical-align: top; font-weight: bold; padding: 4px 8px;">${key}:</td>
          <td style="padding: 4px 8px;">${value}</td>
        </tr>`;
    }
  }

  html += `
      </table>
      <br/>
      <div>
        <strong>Take Action:</strong><br/><br/>
        <a href="${approveUrl}" style="padding: 10px 20px; background-color: #4CAF50; color: white; text-decoration: none; border-radius: 4px; margin-right: 10px;">‚úÖ Approve</a>
        <a href="${denyUrl}" style="padding: 10px 20px; background-color: #f44336; color: white; text-decoration: none; border-radius: 4px;">‚ùå Deny</a>
      </div>
    </div>
  `;
  return html;
}
